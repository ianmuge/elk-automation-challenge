---
apiVersion: v1
kind: ConfigMap
metadata:
  name: packetbeat-config
  namespace: kube-system
  labels:
    k8s-app: packetbeat
data:
  packetbeat.yml: |-
    packetbeat.interfaces.device: any

    packetbeat.protocols:
    - type: dns
      ports: [53]
      include_authorities: true
      include_additionals: true

    - type: http
      ports: [80, 8000, 8080, 9200,5601]

    - type: mysql
      ports: [3306]

    - type: redis
      ports: [6379]

    packetbeat.flows:
      timeout: 30s
      period: 10s

    processors:
      - add_cloud_metadata:
      - add_kubernetes_metadata:
          host: ${HOSTNAME}
          indexers:
          - ip_port:
          matchers:
          - field_format:
              format: '%{[ip]}:%{[port]}'
    output.logstash.hosts: 'logstash-svc.monitoring.svc.cluster.local:5044'
    setup.kibana.host: "http://kibana-svc.monitoring.svc.cluster.local:5601"
    setup.dashboards.enabled: true
    # setup.dashboards.index: "auditbeat-*"
#    output.elasticsearch.hosts: ['${ELASTICSEARCH_HOST:elasticsearch-svc.monitoring.svc.cluster.local}:${ELASTICSEARCH_PORT:9200}']

---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: packetbeat
  namespace: kube-system
  labels:
    k8s-app: packetbeat
    kubernetes.io/cluster-service: "true"
spec:
  template:
    metadata:
      labels:
        k8s-app: packetbeat
        kubernetes.io/cluster-service: "true"
    spec:
      serviceAccountName: packetbeat
      terminationGracePeriodSeconds: 30
      hostNetwork: true
      containers:
      - name: packetbeat
        image: docker.elastic.co/beats/packetbeat:7.6.0
        imagePullPolicy: Always
        args: [
          "-c", "/etc/packetbeat.yml",
          "-e",
        ]
        securityContext:
          runAsUser: 0
          capabilities:
            add:
            - NET_ADMIN
        env:
        - name: ELASTICSEARCH_HOST
          value: elasticsearch-svc.monitoring.svc.cluster.local
        - name: ELASTICSEARCH_PORT
          value: "9200"
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        volumeMounts:
        - name: config
          mountPath: /etc/packetbeat.yml
          readOnly: true
          subPath: packetbeat.yml
        - name: data
          mountPath: /usr/share/packetbeat/data
      volumes:
      - name: config
        configMap:
          defaultMode: 0600
          name: packetbeat-config
      - name: data
        emptyDir: {}
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: packetbeat
subjects:
- kind: ServiceAccount
  name: packetbeat
  namespace: kube-system
roleRef:
  kind: ClusterRole
  name: packetbeat
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: packetbeat
  labels:
    k8s-app: packetbeat
rules:
- apiGroups: [""] # "" indicates the core API group
  resources:
  - namespaces
  - pods
  verbs:
  - get
  - watch
  - list
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: packetbeat
  namespace: kube-system
  labels:
    k8s-app: packetbeat